
@startuml
package glyph {
  abstract class Glyph {
    - parent: Glyph
    - bounds: Bounds
    + draw(Window): void
    + setSize(Window): void
    + setParent(Glyph): void
    + getParent(): Glyph
    + getBounds(): Bounds
    + insertAtPosition(Glyph, int): void
    + remove(Glyph): void
    + getChild(int): Glyph
    + compose(): void
  }
  abstract class CompositeGlyph {
    - children: List<Glyph>
    + getChildren(): List<Glyph>
    + setChildren(List<Glyph>): void
    + draw(Window): void
    + insertAtPosition(Glyph, int): void
    + remove(Glyph): void
    + getChild(int): Glyph
  }


      class Column {
          +Column(compositor: Compositor) throws OperationNotSupportedException
          +draw(window: Window)
          +child(position: int): Glyph
          +setSize(window: Window)
          +moveCursor(cursor: Point, child: Glyph): Point
          +adjustBounds(cursor: Point)
      }



      class Row {
          +Row(compositor: Compositor)
          +draw(window: Window)
          +child(position: int): Glyph
          +setSize(window: Window)
          +moveCursor(cursor: Point, child: Glyph): Point
          +adjustBounds(cursor: Point)
      }




        class Character {

            -char character
            +Character(character: char)
            +draw(window: Window)
            +setSize(window: Window)
        }



        class Rectangle {

            +Rectangle(width: int, height: int)
            +draw(window: Window)
            +setSize(window: Window)
        }




        abstract class Composition {
            -Compositor compositor
            +setCompositor(compositor: Compositor): void
            +getCompositor(): Compositor
            +draw(window: Window): void
            +reformat(): void
            +insert(glyph: Glyph, position: int): void
            +remove(glyph: Glyph): void
            +compose(): void
            +adjustBounds(cursor: Point): void
            +moveCursor(cursor: Point, child: Glyph): Point
        }

            class Bounds {
                    - Point upperLeft
                    - int width
                    - int height
                    + Bounds(Point upperLeft, int width, int height)
                    + Point getUpperLeft()
                    + int getWidth()
                    + int getHeight()
                    + void setPointDimensions(int width, int height)
                }

    interface Compositor {
        {abstract} void compose()
        {abstract} void setComposition(Composition composition)
    }

    class SimpleCompositor {
        - composition: Composition
        - window: Window

        + SimpleCompositor(Window window)
        {abstract} void compose()
        {abstract} void setComposition(Composition composition)
    }
    class Embellishment {
            + moveCursor(cursor: Point, child: Glyph): Point
            + adjustBounds(cursor: Point): void
            + setSize(window: Window): void
            + getChild(): Glyph
            + insert(glyph: Glyph): void
            + insert(glyph: Glyph, position: int): void
            + remove(glyph: Glyph): void
        }
        class Border {
                - thickness: int

                + Border(compositor: Compositor, thickness: int)
                + draw(window: Window): void
            }



        class Scroller {
            - width: int

            + draw(window: Window): void
        }



    Compositor <|.. Glyph : uses
    Composition <|-- Embellishment
    Compositor <|.. SimpleCompositor : implements
    Glyph <|-- CompositeGlyph
    CompositeGlyph <|-- Composition
    Composition <|-- Column
    Composition <|-- Row
    Glyph <|-- Character
    Glyph <|-- Rectangle
    Embellishment <|--- Border
    Embellishment <|--- Scroller
    Glyph "1" -- "1" Bounds : has

}

package window {
    interface Window {
        + drawCharacter(c: char, x: int, y: int): void
        + drawRectangle(x: int, y: int, width: int, height: int): void
        + charWidth(c: char): int
        + charHeight(c: char): int
        + setContents(glyph: Glyph): void
        + addBorder(x1: int, y1: int, x2: int, y2: int, width: int): void
        + addScrollBar(x: int, y: int, width: int, height: int): void
    }

    class SwingWindow {
        - width: int
        - height: int
        - _window: Window
        - _glyph: Glyph
        - _pane: Pane
        - _jFrame: JFrame
        - _graphics: Graphics
        - _fm: FontMetrics

        + SwingWindow(title: String)
        + charWidth(c: char): int
        + charHeight(c: char): int
        + drawCharacter(c: char, x: int, y: int): void
        + drawRectangle(x: int, y: int, width: int, height: int): void
        + setContents(glyph: Glyph): void
        + addBorder(x1: int, y1: int, x2: int, y2: int, width: int): void
        + addScrollBar(x: int, y: int, width: int, height: int): void
    }

     Window <|.. SwingWindow : implements
}
@enduml


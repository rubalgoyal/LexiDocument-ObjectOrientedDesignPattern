
@startuml
package glyph {
  abstract class Glyph {
'    - parent: Glyph
'    - bounds: Bounds
'    + draw(Window): void
'    + setSize(Window): void
'    + setParent(Glyph): void
'    + getParent(): Glyph
'    + getBounds(): Bounds
'    + insertAtPosition(Glyph, int): void
'    + remove(Glyph): void
'    + getChild(int): Glyph
'    + compose(): void
  }
  abstract class CompositeGlyph {
'    - children: List<Glyph>
'    + getChildren(): List<Glyph>
'    + setChildren(List<Glyph>): void
'    + draw(Window): void
'    + insertAtPosition(Glyph, int): void
'    + remove(Glyph): void
'    + getChild(int): Glyph
  }


      class Column {
'          +Column(compositor: Compositor) throws OperationNotSupportedException
'          +draw(window: Window)
'          +child(position: int): Glyph
'          +setSize(window: Window)
'          +moveCursor(cursor: Point, child: Glyph): Point
'          +adjustBounds(cursor: Point)
      }



      class Row {
'          +Row(compositor: Compositor)
'          +draw(window: Window)
'          +child(position: int): Glyph
'          +setSize(window: Window)
'          +moveCursor(cursor: Point, child: Glyph): Point
'          +adjustBounds(cursor: Point)
      }




        class Character {

'            -char character
'            +Character(character: char)
'            +draw(window: Window)
'            +setSize(window: Window)
        }



        class Rectangle {

'            +Rectangle(width: int, height: int)
'            +draw(window: Window)
'            +setSize(window: Window)
        }




        abstract class Composition {
'            -Compositor compositor
'            +setCompositor(compositor: Compositor): void
'            +getCompositor(): Compositor
'            +draw(window: Window): void
'            +reformat(): void
'            +insert(glyph: Glyph, position: int): void
'            +remove(glyph: Glyph): void
'            +compose(): void
'            +adjustBounds(cursor: Point): void
'            +moveCursor(cursor: Point, child: Glyph): Point
        }

            class Bounds {
'                    - Point upperLeft
'                    - int width
'                    - int height
'                    + Bounds(Point upperLeft, int width, int height)
'                    + Point getUpperLeft()
'                    + int getWidth()
'                    + int getHeight()
'                    + void setPointDimensions(int width, int height)
                }

    interface Compositor {

    }

    class SimpleCompositor {

    }
    class Embellishment {

        }
        class Border {

            }



        class Scroller {
            - width: int

            + draw(window: Window): void
        }



    Compositor <|.. Glyph : uses
    Composition <|-- Embellishment
    Compositor <|.. SimpleCompositor : implements
    Glyph <|-- CompositeGlyph
    CompositeGlyph <|-- Composition
    Composition <|-- Column
    Composition <|-- Row
    Glyph <|-- Character
    Glyph <|-- Rectangle
    Embellishment <|--- Border
    Embellishment <|--- Scroller
    Glyph "1" -- "1" Bounds : has

}

package window {
    abstract class Window {
            - windowImp: WindowImp
            - root: Glyph
    }

    abstract class WindowFactory {}
    class ApplicationWindow {}
    class SwingWindow {}
    class SwingWindowFactory{}
    class AwtWindowFactory{}
    interface WindowImp {}
    class AwtWindow{}


     WindowImp <|-- Window : implements
     Window <|--  ApplicationWindow
     WindowImp <|-- SwingWindow
     WindowImp <|-- AwtWindow
     SwingWindow <|.. SwingWindowFactory : creates-a
     AwtWindow <|.. AwtWindowFactory : creates-a
     WindowFactory <|-- AwtWindowFactory
     WindowFactory <|-- SwingWindowFactory

}

package lexiwidget {

    abstract class Button {
    }


    Embellishment <|-- Button

}
package command{
    abstract class Command {}
    class CommandHistory{}
    class DecrementFontSize{}
    class IncrementFontSize{}
    class KeyMap{}
    class Redo{}
    class Undo{}
    class SetFontSize{}
    class PrintWordsCommand{}

}
    Button -|> Embellishment
    Button - Command : composition
    Command <|-- DecrementFontSize
    Command <|-- IncrementFontSize
    Command <|-- Redo
    Command <|-- Undo
    Command <|-- SetFontSize
    Command <|---PrintWordsCommand
    Command o- Window

package iterator{
    Interface Iterator<T> {
    }

    class NullIterator<T> {

    }
    class PreorderIterator<T> {
    }
    class VectorIterator<T> {

    }
    class ListIterator<T> {

    }
}

    Iterator <|...NullIterator
    Iterator <|...VectorIterator
    Iterator <|...PreorderIterator
    Iterator <|... ListIterator
    Iterator <|--- Glyph : associates
    Iterator <|--- CompositeGlyph : uses

package visitor{
    Interface GlyphVisitor {}
    class WordVisitor{}
}
    GlyphVisitor <|...WordVisitor
    GlyphVisitor <|...Glyph : uses
    WordVisitor <|--- PrintWordsCommand






'package glyph {
'    class Compositor
'}
'
'package window {
'    class Window
'}
'
'GUIFactory --> Compositor
'Button --> Window
'Label --> Window
@enduml

